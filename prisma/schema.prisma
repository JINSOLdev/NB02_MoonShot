// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  Int               @id @default(autoincrement())
  email               String            @unique @db.VarChar(100)
  name                String            @db.VarChar(100)
  password            String
  profileImage        String
  provider            String
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  Tokens              Tokens[]
  Projects            Projects[]
  SentInvitations     Invitations[]     @relation("SentInvitations")
  ReceivedInvitations Invitations[]     @relation("ReceivedInvitations")
  Project_members     Project_members[]
  Tasks               Tasks[]
  Subtasks            Subtasks[]
  Comments            Comments[]
}

model Tokens {
  id           Int      @id @default(autoincrement())
  refreshToken String
  created_at   DateTime @default(now())
  updated_at   DateTime
  user         Users    @relation(fields: [userId], references: [id])
  userId       Int
}

model Projects {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(100)
  description     String
  created_at      DateTime          @default(now())
  updated_at      DateTime          @updatedAt
  creator         Users             @relation(fields: [creatorId], references: [id], onDelete:Cascade )
  creatorId       Int
  Invitations     Invitations[]
  Project_members Project_members[]
  Tasks           Tasks[]
}

model Invitations {
  id          Int               @id @default(autoincrement())
  project     Projects          @relation(fields: [projectId], references: [id])
  projectId   Int
  invitor     Users             @relation("SentInvitations", fields: [invitorId], references: [id], onDelete:Cascade)
  invitorId   Int
  invitee     Users             @relation("ReceivedInvitations", fields: [inviteeId], references: [id], onDelete:Cascade)
  inviteeId   Int
  invited_at  DateTime          @default(now())
  accpeted_at DateTime
  status      invitation_status
  token       String
}

model Project_members {
  id        Int      @id @default(autoincrement())
  project   Projects @relation(fields: [projectId], references: [id], onDelete:Cascade)
  projectId Int
  user      Users    @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId    Int
}

model Tasks {
  id          Int          @id @default(autoincrement())
  project     Projects     @relation(fields: [projectId], references: [id], onDelete:Cascade)
  projectId   Int
  title       String       @db.VarChar(100)
  description String
  status      task_status
  user        Users        @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId      Int
  started_at  DateTime
  due_date    DateTime
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  Task_tags   Task_tags[]
  Subtasks    Subtasks[]
  Comments    Comments[]
  Task_files  Task_files[]
}

enum invitation_status {
  pending
  accept
  reject
}

enum task_status {
  todo
  in_progress
  done
}

model Task_tags {
  task   Tasks @relation(fields: [taskId], references: [id], onDelete:Cascade)
  taskId Int
  tag    Tags  @relation(fields: [tagId], references: [id], onDelete:Cascade)
  tagId  Int

  @@id([tagId, taskId])
}

model Tags {
  id        Int         @id @default(autoincrement())
  tag       String[]    @unique
  Task_tags Task_tags[]
}

model Subtasks {
  id          Int      @id @default(autoincrement())
  task        Tasks    @relation(fields: [taskId], references: [id], onDelete:Cascade)
  taskId      Int
  description String
  is_done     Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Users       Users?   @relation(fields: [userId], references: [id], onDelete:Cascade)
  userId     Int?
}

model Comments {
  id         Int      @id @default(autoincrement())
  task       Tasks    @relation(fields: [taskId], references: [id], onDelete:Cascade)
  taskId     Int
  author     Users    @relation(fields: [authorId], references: [id], onDelete:Cascade)
  authorId   Int
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Task_files {
  id         Int      @id @default(autoincrement())
  task       Tasks    @relation(fields: [taskId], references: [id], onDelete:Cascade)
  taskId     Int
  file_name  String
  file_url   String
  updated_at DateTime @updatedAt
}
